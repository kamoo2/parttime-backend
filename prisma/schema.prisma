// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id          Int      @id @default(autoincrement())
  name        String
  username    String   @unique
  email       String   @unique
  password    String
  phoneNumber String?  @unique
  location    String?
  avatarURL   String?  @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  stores      Store[]
}

model Store {
  id          Int          @id @default(autoincrement())
  store       String
  storeNumber String       @unique
  user        User         @relation(fields: [userId], references: [id])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  userId      Int
  employees   Employee[]
  category    Category     @relation(fields: [categoryId], references: [id])
  categoryId  Int
  photos      StorePhoto[]
  holidays    Holiday[]
  rules       Rule[]
  sails       Sail[]
}

// 가게 매출 모델
model Sail {
  id        Int      @id @default(autoincrement())
  year      Int
  month     Int
  day       Int
  slug      String
  sail      Int
  store     Store    @relation(fields: [storeId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  storeId   Int
}

model Holiday {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  stores    Store[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Rule {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  stores    Store[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  stores    Store[]
}

model StorePhoto {
  id        Int      @id @default(autoincrement())
  photoURL  String   @unique
  store     Store    @relation(fields: [storeId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  storeId   Int
}

model Employee {
  id          Int       @id @default(autoincrement())
  name        String
  age         Int
  wage        Int
  sex         String
  store       Store     @relation(fields: [storeId], references: [id])
  phoneNumber String    @unique
  avatarURL   String?   @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  storeId     Int
  workdays    Workday[]
}

model Workday {
  id         Int        @id @default(autoincrement())
  year       Int
  month      Int
  day        Int
  slug       String
  workTime   WorkTime   @relation(fields: [workTimeId], references: [id])
  employees  Employee[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  workTimeId Int
}

model WorkTime {
  id        Int       @id @default(autoincrement())
  time      Int       @unique
  workdays  Workday[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}
